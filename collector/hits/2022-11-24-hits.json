{"metadata":{"table":"hits","tag":"v0.8.125-nightly","size":"Large"},"schema":[{"name":"Q1","sql":"SELECT COUNT(*) FROM hits;","min":0.029,"max":0.032,"median":0.031,"std_dev":0.0009433981132056605,"read_row":1,"read_byte":1,"time":[0.031,0.032,0.03,0.032,0.029,0.031,0.031,0.032,0.032,0.031],"error":[],"mean":0.03108540958977169},{"name":"Q2","sql":"SELECT COUNT(*) FROM hits WHERE AdvEngineID \u003c\u003e 0;","min":1.303,"max":1.537,"median":1.4024999999999999,"std_dev":0.07111884419758241,"read_row":98005036,"read_byte":196010072,"time":[1.455,1.46,1.537,1.421,1.311,1.303,1.41,1.392,1.395,1.315],"error":[],"mean":1.3981022062075026},{"name":"Q3","sql":"SELECT SUM(AdvEngineID), COUNT(*), AVG(ResolutionWidth) FROM hits;","min":1.303,"max":1.635,"median":1.4969999999999999,"std_dev":0.09801270325830222,"read_row":99997397,"read_byte":399989588,"time":[1.578,1.583,1.486,1.475,1.576,1.635,1.426,1.508,1.381,1.303],"error":[],"mean":1.4918088096947637},{"name":"Q4","sql":"SELECT AVG(UserID) FROM hits;","min":1.398,"max":1.574,"median":1.5194999999999999,"std_dev":0.053113463453252636,"read_row":99997397,"read_byte":799979176,"time":[1.446,1.51,1.538,1.536,1.398,1.452,1.543,1.574,1.529,1.46],"error":[],"mean":1.4976480226944389},{"name":"Q5","sql":"SELECT COUNT(DISTINCT UserID) FROM hits;","min":4.877,"max":5.165,"median":4.98,"std_dev":0.07301239620776738,"read_row":99997397,"read_byte":799979176,"time":[5.016,4.907,5.165,4.988,4.99,4.963,5.012,4.972,4.957,4.877],"error":[],"mean":4.984170649496152},{"name":"Q6","sql":"SELECT COUNT(DISTINCT SearchPhrase) FROM hits;","min":3.216,"max":3.795,"median":3.3440000000000003,"std_dev":0.15691845015803588,"read_row":99997397,"read_byte":1539621294,"time":[3.423,3.342,3.216,3.253,3.443,3.346,3.254,3.347,3.795,3.301],"error":[],"mean":3.368532154510137},{"name":"Q7","sql":"SELECT MIN(EventDate), MAX(EventDate) FROM hits;","min":1.267,"max":1.545,"median":1.3904999999999998,"std_dev":0.0822481610736678,"read_row":99997397,"read_byte":399989588,"time":[1.545,1.332,1.396,1.306,1.493,1.449,1.433,1.267,1.342,1.385],"error":[],"mean":1.3923918069169756},{"name":"Q8","sql":"SELECT AdvEngineID, COUNT(*) FROM hits WHERE AdvEngineID \u003c\u003e 0 GROUP BY AdvEngineID ORDER BY COUNT(*) DESC;","min":2.133,"max":2.406,"median":2.29,"std_dev":0.07946502375259193,"read_row":98005036,"read_byte":196010072,"time":[2.355,2.133,2.248,2.358,2.23,2.332,2.406,2.239,2.342,2.228],"error":[],"mean":2.2857077864388358},{"name":"Q9","sql":"SELECT RegionID, COUNT(DISTINCT UserID) AS u FROM hits GROUP BY RegionID ORDER BY u DESC LIMIT 10;","min":3.015,"max":3.015,"median":3.015,"std_dev":0,"read_row":99997397,"read_byte":1199968764,"time":[3.015],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}"],"mean":3.015},{"name":"Q10","sql":"SELECT RegionID, SUM(AdvEngineID), COUNT(*) AS c, AVG(ResolutionWidth), COUNT(DISTINCT UserID) FROM hits GROUP BY RegionID ORDER BY c DESC LIMIT 10;","min":2.952,"max":3.368,"median":3.121,"std_dev":0.16817921988164888,"read_row":99997397,"read_byte":1599958352,"time":[2.952,3.009,3.233,3.368],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}"],"mean":3.136021865488809},{"name":"Q11","sql":"SELECT MobilePhoneModel, COUNT(DISTINCT UserID) AS u FROM hits WHERE MobilePhoneModel \u003c\u003e '' GROUP BY MobilePhoneModel ORDER BY u DESC LIMIT 10;","min":2.274,"max":2.651,"median":2.42,"std_dev":0.11560346015582745,"read_row":99997397,"read_byte":1623245000,"time":[2.549,2.274,2.651,2.586,2.417,2.396,2.387,2.289,2.423,2.446],"error":[],"mean":2.439085411724813},{"name":"Q12","sql":"SELECT MobilePhone, MobilePhoneModel, COUNT(DISTINCT UserID) AS u FROM hits WHERE MobilePhoneModel \u003c\u003e '' GROUP BY MobilePhone, MobilePhoneModel ORDER BY u DESC LIMIT 10;","min":2.302,"max":2.672,"median":2.5484999999999998,"std_dev":0.10403946366643763,"read_row":99997397,"read_byte":1823239794,"time":[2.608,2.456,2.672,2.302,2.494,2.605,2.558,2.635,2.454,2.539],"error":[],"mean":2.5301136626901664},{"name":"Q13","sql":"SELECT SearchPhrase, COUNT(*) AS c FROM hits WHERE SearchPhrase \u003c\u003e '' GROUP BY SearchPhrase ORDER BY c DESC LIMIT 10;","min":3.372,"max":4.654,"median":3.7405,"std_dev":0.4631757225934882,"read_row":99997397,"read_byte":1539621294,"time":[4.654,4.263,3.84,3.424,3.372,4.483,3.583,3.641],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}"],"mean":3.8807557575703493},{"name":"Q14","sql":"SELECT SearchPhrase, COUNT(DISTINCT UserID) AS u FROM hits WHERE SearchPhrase \u003c\u003e '' GROUP BY SearchPhrase ORDER BY u DESC LIMIT 10;","min":3.567,"max":4.286,"median":3.8810000000000002,"std_dev":0.22986787509349796,"read_row":99997397,"read_byte":2339600470,"time":[4.247,4.238,3.931,3.737,3.922,3.826,4.286,3.84,3.792,3.567],"error":[],"mean":3.931947169406781},{"name":"Q15","sql":"SELECT SearchEngineID, SearchPhrase, COUNT(*) AS c FROM hits WHERE SearchPhrase \u003c\u003e '' GROUP BY SearchEngineID, SearchPhrase ORDER BY c DESC LIMIT 10;","min":3.723,"max":4.328,"median":3.936,"std_dev":0.23929061828663503,"read_row":99997397,"read_byte":1739616088,"time":[4.219,3.753,3.723,4.328,3.994,4.283,3.734,3.878],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}"],"mean":3.9818814776138844},{"name":"Q16","sql":"SELECT UserID, COUNT(*) FROM hits GROUP BY UserID ORDER BY COUNT(*) DESC LIMIT 10;","min":3.509,"max":3.998,"median":3.772,"std_dev":0.15914059317176665,"read_row":99997397,"read_byte":799979176,"time":[3.73,3.998,3.817,3.985,3.885,3.772,3.561,3.509,3.734],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":3.7733989032773367},{"name":"Q17","sql":"SELECT UserID, SearchPhrase, COUNT(*) FROM hits GROUP BY UserID, SearchPhrase ORDER BY COUNT(*) DESC LIMIT 10;","min":6.285,"max":8.488,"median":7.398,"std_dev":0.8090962188504063,"read_row":99997397,"read_byte":2339600470,"time":[8.209,7.681,7.935,7.398,7.035,6.285,6.31,8.488,6.292],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":7.247255414786623},{"name":"Q18","sql":"SELECT UserID, SearchPhrase, COUNT(*) FROM hits GROUP BY UserID, SearchPhrase LIMIT 10;","min":3.177,"max":4.34,"median":3.38,"std_dev":0.324708226102705,"read_row":99997397,"read_byte":2339600470,"time":[3.442,3.33,3.47,3.364,4.34,3.38,3.257,3.177,3.624],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}"],"mean":3.4734683854519983},{"name":"Q19","sql":"SELECT UserID, extract(minute FROM EventTime) AS m, SearchPhrase, COUNT(*) FROM hits GROUP BY UserID, m, SearchPhrase ORDER BY COUNT(*) DESC LIMIT 10;","min":10.362,"max":19.482,"median":14.856,"std_dev":2.909875666598442,"read_row":99997397,"read_byte":3139579646,"time":[16.539,13.922,19.482,10.362,11.879,14.856,18.171,14.217,18.396],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":15.023268911430753},{"name":"Q20","sql":"SELECT UserID FROM hits WHERE UserID = 435090932899640449;","min":1.261,"max":1.484,"median":1.342,"std_dev":0.07416764793358359,"read_row":879758,"read_byte":7038064,"time":[1.484,1.295,1.289,1.261,1.37,1.269,1.429,1.349,1.335,1.445],"error":[],"mean":1.350593686960916},{"name":"Q21","sql":"SELECT COUNT(*) FROM hits WHERE URL LIKE '%google%';","min":2.741,"max":3.048,"median":2.924,"std_dev":0.08544524562548811,"read_row":99997397,"read_byte":9838815562,"time":[2.981,2.741,2.937,2.924,2.913,2.844,2.924,2.802,3.048,2.967],"error":[],"mean":2.9068327270812016},{"name":"Q22","sql":"SELECT SearchPhrase, MIN(URL), COUNT(*) AS c FROM hits WHERE URL LIKE '%google%' AND SearchPhrase \u003c\u003e '' GROUP BY SearchPhrase ORDER BY c DESC LIMIT 10;","min":3.798,"max":4.832,"median":3.864,"std_dev":0.29617901681246767,"read_row":99997397,"read_byte":11378436856,"time":[4.832,3.84,3.885,3.809,4.025,3.843,3.816,3.798,3.885,3.9],"error":[],"mean":3.953407093305712},{"name":"Q23","sql":"SELECT SearchPhrase, MIN(URL), MIN(Title), COUNT(*) AS c, COUNT(DISTINCT UserID) FROM hits WHERE Title LIKE '%Google%' AND URL NOT LIKE '%.google.%' AND SearchPhrase \u003c\u003e '' GROUP BY SearchPhrase ORDER BY c DESC LIMIT 10;","min":5.593,"max":6.056,"median":5.7875,"std_dev":0.13975034883677387,"read_row":99997397,"read_byte":22323686783,"time":[6.056,5.657,5.911,5.869,5.782,6,5.719,5.793,5.738,5.593],"error":[],"mean":5.810125910190885},{"name":"Q24","sql":"SELECT * FROM hits WHERE URL LIKE '%google%' ORDER BY EventTime LIMIT 10;","min":8.444,"max":8.954,"median":8.663499999999999,"std_dev":0.16804942725281757,"read_row":99997397,"read_byte":74652018633,"time":[8.46,8.444,8.485,8.546,8.874,8.794,8.954,8.657,8.703,8.67],"error":[],"mean":8.657074993789177},{"name":"Q25","sql":"SELECT SearchPhrase FROM hits WHERE SearchPhrase \u003c\u003e '' ORDER BY EventTime LIMIT 10;","min":3.881,"max":7.052,"median":4.9755,"std_dev":0.9016994454916781,"read_row":99997397,"read_byte":2339600470,"time":[5.373,4.181,4.445,5.225,4.511,5.055,6.142,7.052,4.896,3.881],"error":[],"mean":5.001331278021961},{"name":"Q26","sql":"SELECT SearchPhrase FROM hits WHERE SearchPhrase \u003c\u003e '' ORDER BY SearchPhrase LIMIT 10;","min":3.681,"max":5.1,"median":4.5885,"std_dev":0.45687814568000495,"read_row":99997397,"read_byte":1539621294,"time":[5.091,3.681,4.113,5.1,3.983,4.603,4.352,4.574,4.728,4.951],"error":[],"mean":4.493765981643779},{"name":"Q27","sql":"SELECT SearchPhrase FROM hits WHERE SearchPhrase \u003c\u003e '' ORDER BY EventTime, SearchPhrase LIMIT 10;","min":3.929,"max":7.271,"median":5.1615,"std_dev":0.9984831696127883,"read_row":99997397,"read_byte":2339600470,"time":[5.897,6.004,5.264,4.205,3.929,6.014,7.271,4.207,5.059,4.656],"error":[],"mean":5.158510813162298},{"name":"Q28","sql":"SELECT CounterID, AVG(length(URL)) AS l, COUNT(*) AS c FROM hits WHERE URL \u003c\u003e '' GROUP BY CounterID HAVING COUNT(*) \u003e 100000 ORDER BY l DESC LIMIT 25;","min":3.311,"max":3.691,"median":3.5465,"std_dev":0.10942559115673078,"read_row":99997397,"read_byte":10238805150,"time":[3.561,3.691,3.448,3.6,3.426,3.483,3.532,3.575,3.665,3.311],"error":[],"mean":3.527488861314048},{"name":"Q30","sql":"SELECT SUM(ResolutionWidth), SUM(ResolutionWidth + 1), SUM(ResolutionWidth + 2), SUM(ResolutionWidth + 3), SUM(ResolutionWidth + 4), SUM(ResolutionWidth + 5), SUM(ResolutionWidth + 6), SUM(ResolutionWidth + 7), SUM(ResolutionWidth + 8), SUM(ResolutionWidth + 9), SUM(ResolutionWidth + 10), SUM(ResolutionWidth + 11), SUM(ResolutionWidth + 12), SUM(ResolutionWidth + 13), SUM(ResolutionWidth + 14), SUM(ResolutionWidth + 15), SUM(ResolutionWidth + 16), SUM(ResolutionWidth + 17), SUM(ResolutionWidth + 18), SUM(ResolutionWidth + 19), SUM(ResolutionWidth + 20), SUM(ResolutionWidth + 21), SUM(ResolutionWidth + 22), SUM(ResolutionWidth + 23), SUM(ResolutionWidth + 24), SUM(ResolutionWidth + 25), SUM(ResolutionWidth + 26), SUM(ResolutionWidth + 27), SUM(ResolutionWidth + 28), SUM(ResolutionWidth + 29), SUM(ResolutionWidth + 30), SUM(ResolutionWidth + 31), SUM(ResolutionWidth + 32), SUM(ResolutionWidth + 33), SUM(ResolutionWidth + 34), SUM(ResolutionWidth + 35), SUM(ResolutionWidth + 36), SUM(ResolutionWidth + 37), SUM(ResolutionWidth + 38), SUM(ResolutionWidth + 39), SUM(ResolutionWidth + 40), SUM(ResolutionWidth + 41), SUM(ResolutionWidth + 42), SUM(ResolutionWidth + 43), SUM(ResolutionWidth + 44), SUM(ResolutionWidth + 45), SUM(ResolutionWidth + 46), SUM(ResolutionWidth + 47), SUM(ResolutionWidth + 48), SUM(ResolutionWidth + 49), SUM(ResolutionWidth + 50), SUM(ResolutionWidth + 51), SUM(ResolutionWidth + 52), SUM(ResolutionWidth + 53), SUM(ResolutionWidth + 54), SUM(ResolutionWidth + 55), SUM(ResolutionWidth + 56), SUM(ResolutionWidth + 57), SUM(ResolutionWidth + 58), SUM(ResolutionWidth + 59), SUM(ResolutionWidth + 60), SUM(ResolutionWidth + 61), SUM(ResolutionWidth + 62), SUM(ResolutionWidth + 63), SUM(ResolutionWidth + 64), SUM(ResolutionWidth + 65), SUM(ResolutionWidth + 66), SUM(ResolutionWidth + 67), SUM(ResolutionWidth + 68), SUM(ResolutionWidth + 69), SUM(ResolutionWidth + 70), SUM(ResolutionWidth + 71), SUM(ResolutionWidth + 72), SUM(ResolutionWidth + 73), SUM(ResolutionWidth + 74), SUM(ResolutionWidth + 75), SUM(ResolutionWidth + 76), SUM(ResolutionWidth + 77), SUM(ResolutionWidth + 78), SUM(ResolutionWidth + 79), SUM(ResolutionWidth + 80), SUM(ResolutionWidth + 81), SUM(ResolutionWidth + 82), SUM(ResolutionWidth + 83), SUM(ResolutionWidth + 84), SUM(ResolutionWidth + 85), SUM(ResolutionWidth + 86), SUM(ResolutionWidth + 87), SUM(ResolutionWidth + 88), SUM(ResolutionWidth + 89) FROM hits;","min":1.691,"max":2.793,"median":1.8290000000000002,"std_dev":0.30833235315159524,"read_row":99997397,"read_byte":199994794,"time":[1.691,1.846,1.7,1.832,1.73,1.843,1.826,2.793,1.746,1.847],"error":[],"mean":1.86526438385325},{"name":"Q31","sql":"SELECT SearchEngineID, ClientIP, COUNT(*) AS c, SUM(IsRefresh), AVG(ResolutionWidth) FROM hits WHERE SearchPhrase \u003c\u003e '' GROUP BY SearchEngineID, ClientIP ORDER BY c DESC LIMIT 10;","min":3.115,"max":3.501,"median":3.3064999999999998,"std_dev":0.12011948218336603,"read_row":99997397,"read_byte":2539595264,"time":[3.501,3.328,3.115,3.395,3.155,3.285,3.338,3.173,3.194,3.405],"error":[],"mean":3.2867119420877176},{"name":"Q32","sql":"SELECT WatchID, ClientIP, COUNT(*) AS c, SUM(IsRefresh), AVG(ResolutionWidth) FROM hits WHERE SearchPhrase \u003c\u003e '' GROUP BY WatchID, ClientIP ORDER BY c DESC LIMIT 10;","min":4.084,"max":5.667,"median":4.6945,"std_dev":0.5119081948943581,"read_row":99997397,"read_byte":3139579646,"time":[5.126,5.307,4.51,4.721,5.667,4.668,4.1,5.308,4.084,4.429],"error":[],"mean":4.764779939675003},{"name":"Q33","sql":"SELECT WatchID, ClientIP, COUNT(*) AS c, SUM(IsRefresh), AVG(ResolutionWidth) FROM hits GROUP BY WatchID, ClientIP ORDER BY c DESC LIMIT 10;","min":17.554,"max":28.05,"median":22.128,"std_dev":4.296737470324304,"read_row":99997397,"read_byte":1599958352,"time":[28.05,22.128,17.554],"error":["request got bad status: 404 req= resp=query id not found 4db272de-c4ac-4cdd-b4c3-39a2837eeb22","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":22.16921800529524},{"name":"Q34","sql":"SELECT URL, COUNT(*) AS c FROM hits GROUP BY URL ORDER BY c DESC LIMIT 10;","min":11.108,"max":19.522,"median":13.286000000000001,"std_dev":2.6660451017143347,"read_row":99997397,"read_byte":9838815562,"time":[14.67,19.522,12.592,11.74,13.98,11.108,16.786,12.335],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}"],"mean":13.85936495763144},{"name":"Q35","sql":"SELECT 1, URL, COUNT(*) AS c FROM hits GROUP BY 1, URL ORDER BY c DESC LIMIT 10;","min":19.239,"max":22.115,"median":20.4955,"std_dev":1.1759603256487856,"read_row":99997397,"read_byte":9838815562,"time":[19.67,22.115,21.321,19.239],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: stream error received: stream no longer needed, source: Some(hyper::Error(Body, Error { kind: Reset(StreamId(1), CANCEL, Remote) })) Kind:}","request got bad status: 500 req= resp={\"error\":{\"kind\":\"InternalError\",\"message\":\"proxy upstream failed: EOF\"}}","request got bad status: 404 req= resp=query id not found 7baf0e3c-e045-412e-b26f-4e372f5290ea","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":20.552769048847306},{"name":"Q36","sql":"SELECT ClientIP, ClientIP - 1, ClientIP - 2, ClientIP - 3, COUNT(*) AS c FROM hits GROUP BY ClientIP, ClientIP - 1, ClientIP - 2, ClientIP - 3 ORDER BY c DESC LIMIT 10;","min":4.342,"max":5.156,"median":4.6,"std_dev":0.29993126784664986,"read_row":99997397,"read_byte":399989588,"time":[5.156,4.342,4.379,4.6,4.358,4.913,4.358,4.713,5.023],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}"],"mean":4.639591074530638},{"name":"Q37","sql":"SELECT URL, COUNT(*) AS PageViews FROM hits WHERE CounterID = 62 AND EventDate \u003e= '2013-07-01' AND EventDate \u003c= '2013-07-31' AND DontCountHits = 0 AND IsRefresh = 0 AND URL \u003c\u003e '' GROUP BY URL ORDER BY PageViews DESC LIMIT 10;","min":2.406,"max":2.767,"median":2.5185,"std_dev":0.10351637551614716,"read_row":5758161,"read_byte":687097589,"time":[2.518,2.501,2.519,2.767,2.467,2.579,2.406,2.652,2.663,2.484],"error":[],"mean":2.5535355806818667},{"name":"Q38","sql":"SELECT Title, COUNT(*) AS PageViews FROM hits WHERE CounterID = 62 AND EventDate \u003e= '2013-07-01' AND EventDate \u003c= '2013-07-31' AND DontCountHits = 0 AND IsRefresh = 0 AND Title \u003c\u003e '' GROUP BY Title ORDER BY PageViews DESC LIMIT 10;","min":2.323,"max":2.506,"median":2.4234999999999998,"std_dev":0.06918446357383998,"read_row":5758161,"read_byte":685666184,"time":[2.449,2.333,2.354,2.487,2.398,2.506,2.345,2.45,2.323,2.504],"error":[],"mean":2.4139087439492934},{"name":"Q39","sql":"SELECT URL, COUNT(*) AS PageViews FROM hits WHERE CounterID = 62 AND EventDate \u003e= '2013-07-01' AND EventDate \u003c= '2013-07-31' AND IsRefresh = 0 AND IsLink \u003c\u003e 0 AND IsDownload = 0 GROUP BY URL ORDER BY PageViews DESC LIMIT 10 OFFSET 1000;","min":2.195,"max":2.592,"median":2.396,"std_dev":0.12669652718208185,"read_row":5758161,"read_byte":698613911,"time":[2.397,2.195,2.395,2.27,2.221,2.398,2.354,2.445,2.576,2.592],"error":[],"mean":2.380947311268019},{"name":"Q40","sql":"SELECT TraficSourceID, SearchEngineID, AdvEngineID, CASE WHEN (SearchEngineID = 0 AND AdvEngineID = 0) THEN Referer ELSE '' END AS Src, URL AS Dst, COUNT(*) AS PageViews FROM hits WHERE CounterID = 62 AND EventDate \u003e= '2013-07-01' AND EventDate \u003c= '2013-07-31' AND IsRefresh = 0 GROUP BY TraficSourceID, SearchEngineID, AdvEngineID, Src, Dst ORDER BY PageViews DESC LIMIT 10 OFFSET 1000;","min":2.59,"max":3.176,"median":2.935,"std_dev":0.19400458184738267,"read_row":5758161,"read_byte":1220830641,"time":[3.176,2.935,3.031,2.59,2.768,2.783,2.945,2.649,3.13],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":2.8831205294706055},{"name":"Q41","sql":"SELECT URLHash, EventDate, COUNT(*) AS PageViews FROM hits WHERE CounterID = 62 AND EventDate \u003e= '2013-07-01' AND EventDate \u003c= '2013-07-31' AND IsRefresh = 0 AND TraficSourceID IN (-1, 6) AND RefererHash = 3594120000172545465 GROUP BY URLHash, EventDate ORDER BY PageViews DESC LIMIT 10 OFFSET 100;","min":2.187,"max":2.469,"median":2.351,"std_dev":0.08585947821877325,"read_row":5758161,"read_byte":161228508,"time":[2.384,2.417,2.41,2.187,2.217,2.469,2.302,2.362,2.34,2.277],"error":[],"mean":2.334909010193765},{"name":"Q42","sql":"SELECT WindowClientWidth, WindowClientHeight, COUNT(*) AS PageViews FROM hits WHERE CounterID = 62 AND EventDate \u003e= '2013-07-01' AND EventDate \u003c= '2013-07-31' AND IsRefresh = 0 AND DontCountHits = 0 AND URLHash = 2868770270353813622 GROUP BY WindowClientWidth, WindowClientHeight ORDER BY PageViews DESC LIMIT 10 OFFSET 10000;","min":2.198,"max":2.582,"median":2.3434999999999997,"std_dev":0.11266237171300802,"read_row":5758161,"read_byte":138195864,"time":[2.344,2.261,2.383,2.246,2.582,2.23,2.451,2.343,2.198,2.425],"error":[],"mean":2.3436395028586925},{"name":"Q43","sql":"SELECT DATE_TRUNC('minute', EventTime) AS M, COUNT(*) AS PageViews FROM hits WHERE CounterID = 62 AND EventDate \u003e= '2013-07-14' AND EventDate \u003c= '2013-07-15' AND IsRefresh = 0 AND DontCountHits = 0 GROUP BY DATE_TRUNC('minute', EventTime) ORDER BY DATE_TRUNC('minute', EventTime) LIMIT 10 OFFSET 1000;","min":2.223,"max":2.464,"median":2.316,"std_dev":0.07780494842874715,"read_row":5758161,"read_byte":115163220,"time":[2.316,2.423,2.464,2.413,2.223,2.297,2.306,2.316,2.239,2.41],"error":[],"mean":2.33940785966741}]}