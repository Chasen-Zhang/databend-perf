{"metadata":{"table":"hits","tag":"v0.8.107-nightly","size":"Large"},"schema":[{"name":"Q1","sql":"SELECT COUNT(*) FROM hits;","min":0.121,"max":0.212,"median":0.155,"std_dev":0.030914236202759404,"read_row":1,"read_byte":1,"time":[0.126,0.171,0.144,0.189,0.166,0.141,0.212,0.129,0.121,0.2],"error":[],"mean":0.15697334357716367},{"name":"Q2","sql":"SELECT COUNT(*) FROM hits WHERE AdvEngineID \u003c\u003e 0;","min":1.456,"max":1.742,"median":1.6135000000000002,"std_dev":0.09351662953721118,"read_row":99257626,"read_byte":198515252,"time":[1.742,1.585,1.685,1.606,1.621,1.456,1.459,1.687,1.693,1.544],"error":[],"mean":1.605033820860923},{"name":"Q3","sql":"SELECT SUM(AdvEngineID), COUNT(*), AVG(ResolutionWidth) FROM hits;","min":1.5,"max":1.735,"median":1.589,"std_dev":0.0750250624791476,"read_row":99997397,"read_byte":399989588,"time":[1.735,1.632,1.65,1.55,1.606,1.536,1.572,1.696,1.5,1.511],"error":[],"mean":1.5970577277194773},{"name":"Q4","sql":"SELECT AVG(UserID) FROM hits;","min":1.516,"max":1.815,"median":1.6804999999999999,"std_dev":0.10733801749613224,"read_row":99997397,"read_byte":799979176,"time":[1.754,1.553,1.728,1.546,1.815,1.759,1.516,1.546,1.755,1.633],"error":[],"mean":1.6570166555821202},{"name":"Q5","sql":"SELECT COUNT(DISTINCT UserID) FROM hits;","min":5.05,"max":5.233,"median":5.1625,"std_dev":0.06422927681361514,"read_row":99997397,"read_byte":799979176,"time":[5.062,5.168,5.05,5.182,5.233,5.144,5.076,5.229,5.157,5.209],"error":[],"mean":5.150598382612611},{"name":"Q6","sql":"SELECT COUNT(DISTINCT SearchPhrase) FROM hits;","min":3.544,"max":3.731,"median":3.6285,"std_dev":0.05558453022199611,"read_row":99997397,"read_byte":1539621294,"time":[3.588,3.707,3.688,3.656,3.617,3.63,3.544,3.731,3.586,3.627],"error":[],"mean":3.6369757526801503},{"name":"Q7","sql":"SELECT MIN(EventDate), MAX(EventDate) FROM hits;","min":1.381,"max":1.741,"median":1.631,"std_dev":0.11948175592951422,"read_row":99997397,"read_byte":399989588,"time":[1.681,1.687,1.381,1.401,1.624,1.741,1.638,1.49,1.503,1.645],"error":[],"mean":1.5744629504174266},{"name":"Q8","sql":"SELECT AdvEngineID, COUNT(*) FROM hits WHERE AdvEngineID \u003c\u003e 0 GROUP BY AdvEngineID ORDER BY COUNT(*) DESC;","min":2.189,"max":2.68,"median":2.4690000000000003,"std_dev":0.1444807599647787,"read_row":99257626,"read_byte":198515252,"time":[2.582,2.68,2.556,2.189,2.318,2.466,2.266,2.479,2.361,2.472],"error":[],"mean":2.4325876820742365},{"name":"Q9","sql":"SELECT RegionID, COUNT(DISTINCT UserID) AS u FROM hits GROUP BY RegionID ORDER BY u DESC LIMIT 10;","min":2.877,"max":3.481,"median":3.0305,"std_dev":0.1614609859997145,"read_row":99997397,"read_byte":1199968764,"time":[2.969,2.97,3.481,3.145,3.046,2.877,3.066,3.185,3.015,2.961],"error":[],"mean":3.067445386520887},{"name":"Q10","sql":"SELECT RegionID, SUM(AdvEngineID), COUNT(*) AS c, AVG(ResolutionWidth), COUNT(DISTINCT UserID) FROM hits GROUP BY RegionID ORDER BY c DESC LIMIT 10;","min":2.946,"max":3.496,"median":3.125,"std_dev":0.14781378007563065,"read_row":99997397,"read_byte":1599958352,"time":[3.263,3.125,3.116,3.132,2.946,3.089,3.496,3.188,3.026],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":3.1500810951559215},{"name":"Q11","sql":"SELECT MobilePhoneModel, COUNT(DISTINCT UserID) AS u FROM hits WHERE MobilePhoneModel \u003c\u003e '' GROUP BY MobilePhoneModel ORDER BY u DESC LIMIT 10;","min":2.409,"max":2.891,"median":2.576,"std_dev":0.14395360363672732,"read_row":99997397,"read_byte":1623245000,"time":[2.531,2.466,2.604,2.409,2.646,2.469,2.548,2.771,2.891,2.711],"error":[],"mean":2.6006909630710466},{"name":"Q12","sql":"SELECT MobilePhone, MobilePhoneModel, COUNT(DISTINCT UserID) AS u FROM hits WHERE MobilePhoneModel \u003c\u003e '' GROUP BY MobilePhone, MobilePhoneModel ORDER BY u DESC LIMIT 10;","min":2.274,"max":3.057,"median":2.4915000000000003,"std_dev":0.19914758346512765,"read_row":99997397,"read_byte":1823239794,"time":[2.512,2.457,2.274,2.564,2.557,2.441,3.057,2.471,2.342,2.527],"error":[],"mean":2.5129231642228964},{"name":"Q13","sql":"SELECT SearchPhrase, COUNT(*) AS c FROM hits WHERE SearchPhrase \u003c\u003e '' GROUP BY SearchPhrase ORDER BY c DESC LIMIT 10;","min":3.833,"max":4.307,"median":4.071,"std_dev":0.15086364704593358,"read_row":99997397,"read_byte":1539621294,"time":[4.071,4.09,4.307,4.037,3.833],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":4.06480176203413},{"name":"Q14","sql":"SELECT SearchPhrase, COUNT(DISTINCT UserID) AS u FROM hits WHERE SearchPhrase \u003c\u003e '' GROUP BY SearchPhrase ORDER BY u DESC LIMIT 10;","min":4.26,"max":4.832,"median":4.5555,"std_dev":0.19330200895662392,"read_row":99997397,"read_byte":2339600470,"time":[4.647,4.26,4.318,4.832,4.546,4.565],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}"],"mean":4.523872344370811},{"name":"Q15","sql":"SELECT SearchEngineID, SearchPhrase, COUNT(*) AS c FROM hits WHERE SearchPhrase \u003c\u003e '' GROUP BY SearchEngineID, SearchPhrase ORDER BY c DESC LIMIT 10;","min":3.913,"max":4.722,"median":4.345,"std_dev":0.24995656765583446,"read_row":99997397,"read_byte":1739616088,"time":[3.913,4.345,4.356,4.722,4.476,4.049,4.197],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}"],"mean":4.286740426468902},{"name":"Q16","sql":"SELECT UserID, COUNT(*) FROM hits GROUP BY UserID ORDER BY COUNT(*) DESC LIMIT 10;","min":6.63,"max":6.901,"median":6.8355,"std_dev":0.07770416655495385,"read_row":99997397,"read_byte":799979176,"time":[6.835,6.836,6.63,6.854,6.901,6.799,6.868,6.779],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}"],"mean":6.812302096199787},{"name":"Q17","sql":"SELECT UserID, SearchPhrase, COUNT(*) FROM hits GROUP BY UserID, SearchPhrase ORDER BY COUNT(*) DESC LIMIT 10;","min":20.658,"max":21.272,"median":21.004,"std_dev":0.18778717925182725,"read_row":99997397,"read_byte":2339600470,"time":[20.658,21.152,21.272,20.732,20.984,20.938,21.151,21.004,21.069],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":20.994713359734757},{"name":"Q18","sql":"SELECT UserID, SearchPhrase, COUNT(*) FROM hits GROUP BY UserID, SearchPhrase LIMIT 10;","min":4.882,"max":5.318,"median":5.0805,"std_dev":0.12702601849621206,"read_row":99997397,"read_byte":2339600470,"time":[5.074,5.017,5.222,5.318,4.882,4.991,5.122,5.087],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":5.087545456827001},{"name":"Q19","sql":"SELECT UserID, extract(minute FROM EventTime) AS m, SearchPhrase, COUNT(*) FROM hits GROUP BY UserID, m, SearchPhrase ORDER BY COUNT(*) DESC LIMIT 10;","min":59.868,"max":61.115,"median":60.223,"std_dev":0.37804799392972044,"read_row":99997397,"read_byte":3139579646,"time":[61.115,60.498,60.223,60.159,59.868,60.019,60.225],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":60.299820633410306},{"name":"Q20","sql":"SELECT UserID FROM hits WHERE UserID = 435090932899640449;","min":1.429,"max":1.597,"median":1.5205,"std_dev":0.04883246870679382,"read_row":631929,"read_byte":5055432,"time":[1.569,1.499,1.429,1.509,1.545,1.597,1.458,1.535,1.532,1.474],"error":[],"mean":1.513910355798971},{"name":"Q21","sql":"SELECT COUNT(*) FROM hits WHERE URL LIKE '%google%';","min":2.889,"max":3.46,"median":2.9695,"std_dev":0.15539321091991115,"read_row":99997397,"read_byte":9838815562,"time":[3.066,2.889,2.902,2.973,3.031,3.001,2.943,3.46,2.966,2.964],"error":[],"mean":3.015768251308655},{"name":"Q22","sql":"SELECT SearchPhrase, MIN(URL), COUNT(*) AS c FROM hits WHERE URL LIKE '%google%' AND SearchPhrase \u003c\u003e '' GROUP BY SearchPhrase ORDER BY c DESC LIMIT 10;","min":3.899,"max":4.538,"median":4.079000000000001,"std_dev":0.16739596769337073,"read_row":99997397,"read_byte":11378436856,"time":[4.107,4.006,3.899,4.093,4.112,4.072,4.538,3.914,4.026,4.086],"error":[],"mean":4.082017806620018},{"name":"Q23","sql":"SELECT SearchPhrase, MIN(URL), MIN(Title), COUNT(*) AS c, COUNT(DISTINCT UserID) FROM hits WHERE Title LIKE '%Google%' AND URL NOT LIKE '%.google.%' AND SearchPhrase \u003c\u003e '' GROUP BY SearchPhrase ORDER BY c DESC LIMIT 10;","min":5.847,"max":6.474,"median":6.0525,"std_dev":0.173117445683559,"read_row":99997397,"read_byte":22381782047,"time":[5.99,6.122,6.098,6.071,5.884,6.238,6.034,5.847,5.957,6.474],"error":[],"mean":6.06907428127217},{"name":"Q24","sql":"SELECT * FROM hits WHERE URL LIKE '%google%' ORDER BY EventTime LIMIT 10;","min":8.917,"max":9.61,"median":9.018,"std_dev":0.20698753585663077,"read_row":99997397,"read_byte":78109285651,"time":[8.917,9.297,8.918,9.047,9.029,8.929,8.959,9.61,9.043,9.007],"error":[],"mean":9.073298001244433},{"name":"Q25","sql":"SELECT SearchPhrase FROM hits WHERE SearchPhrase \u003c\u003e '' ORDER BY EventTime LIMIT 10;","min":4.046,"max":5.294,"median":4.2915,"std_dev":0.3564711068235404,"read_row":99997397,"read_byte":2339600470,"time":[4.205,4.046,4.132,4.621,4.724,4.426,4.348,5.294,4.235,4.164],"error":[],"mean":4.40600216925016},{"name":"Q26","sql":"SELECT SearchPhrase FROM hits WHERE SearchPhrase \u003c\u003e '' ORDER BY SearchPhrase LIMIT 10;","min":3.543,"max":4.577,"median":3.9835000000000003,"std_dev":0.28130710975728995,"read_row":99997397,"read_byte":1539621294,"time":[3.865,4.577,3.96,3.543,4.102,4.001,4.095,4.154,3.566,3.966],"error":[],"mean":3.9730272184641824},{"name":"Q27","sql":"SELECT SearchPhrase FROM hits WHERE SearchPhrase \u003c\u003e '' ORDER BY EventTime, SearchPhrase LIMIT 10;","min":3.614,"max":5.132,"median":4.2545,"std_dev":0.4394387443091471,"read_row":99997397,"read_byte":2339600470,"time":[4.367,3.614,4.795,3.886,3.947,4.142,3.96,5.132,4.437,4.557],"error":[],"mean":4.2615641072981845},{"name":"Q28","sql":"SELECT CounterID, AVG(length(URL)) AS l, COUNT(*) AS c FROM hits WHERE URL \u003c\u003e '' GROUP BY CounterID HAVING COUNT(*) \u003e 100000 ORDER BY l DESC LIMIT 25;","min":3.547,"max":3.867,"median":3.7424999999999997,"std_dev":0.08406640232578054,"read_row":99997397,"read_byte":10238805150,"time":[3.867,3.747,3.738,3.687,3.651,3.781,3.79,3.547,3.686,3.774],"error":[],"mean":3.725843797278404},{"name":"Q30","sql":"SELECT SUM(ResolutionWidth), SUM(ResolutionWidth + 1), SUM(ResolutionWidth + 2), SUM(ResolutionWidth + 3), SUM(ResolutionWidth + 4), SUM(ResolutionWidth + 5), SUM(ResolutionWidth + 6), SUM(ResolutionWidth + 7), SUM(ResolutionWidth + 8), SUM(ResolutionWidth + 9), SUM(ResolutionWidth + 10), SUM(ResolutionWidth + 11), SUM(ResolutionWidth + 12), SUM(ResolutionWidth + 13), SUM(ResolutionWidth + 14), SUM(ResolutionWidth + 15), SUM(ResolutionWidth + 16), SUM(ResolutionWidth + 17), SUM(ResolutionWidth + 18), SUM(ResolutionWidth + 19), SUM(ResolutionWidth + 20), SUM(ResolutionWidth + 21), SUM(ResolutionWidth + 22), SUM(ResolutionWidth + 23), SUM(ResolutionWidth + 24), SUM(ResolutionWidth + 25), SUM(ResolutionWidth + 26), SUM(ResolutionWidth + 27), SUM(ResolutionWidth + 28), SUM(ResolutionWidth + 29), SUM(ResolutionWidth + 30), SUM(ResolutionWidth + 31), SUM(ResolutionWidth + 32), SUM(ResolutionWidth + 33), SUM(ResolutionWidth + 34), SUM(ResolutionWidth + 35), SUM(ResolutionWidth + 36), SUM(ResolutionWidth + 37), SUM(ResolutionWidth + 38), SUM(ResolutionWidth + 39), SUM(ResolutionWidth + 40), SUM(ResolutionWidth + 41), SUM(ResolutionWidth + 42), SUM(ResolutionWidth + 43), SUM(ResolutionWidth + 44), SUM(ResolutionWidth + 45), SUM(ResolutionWidth + 46), SUM(ResolutionWidth + 47), SUM(ResolutionWidth + 48), SUM(ResolutionWidth + 49), SUM(ResolutionWidth + 50), SUM(ResolutionWidth + 51), SUM(ResolutionWidth + 52), SUM(ResolutionWidth + 53), SUM(ResolutionWidth + 54), SUM(ResolutionWidth + 55), SUM(ResolutionWidth + 56), SUM(ResolutionWidth + 57), SUM(ResolutionWidth + 58), SUM(ResolutionWidth + 59), SUM(ResolutionWidth + 60), SUM(ResolutionWidth + 61), SUM(ResolutionWidth + 62), SUM(ResolutionWidth + 63), SUM(ResolutionWidth + 64), SUM(ResolutionWidth + 65), SUM(ResolutionWidth + 66), SUM(ResolutionWidth + 67), SUM(ResolutionWidth + 68), SUM(ResolutionWidth + 69), SUM(ResolutionWidth + 70), SUM(ResolutionWidth + 71), SUM(ResolutionWidth + 72), SUM(ResolutionWidth + 73), SUM(ResolutionWidth + 74), SUM(ResolutionWidth + 75), SUM(ResolutionWidth + 76), SUM(ResolutionWidth + 77), SUM(ResolutionWidth + 78), SUM(ResolutionWidth + 79), SUM(ResolutionWidth + 80), SUM(ResolutionWidth + 81), SUM(ResolutionWidth + 82), SUM(ResolutionWidth + 83), SUM(ResolutionWidth + 84), SUM(ResolutionWidth + 85), SUM(ResolutionWidth + 86), SUM(ResolutionWidth + 87), SUM(ResolutionWidth + 88), SUM(ResolutionWidth + 89) FROM hits;","min":1.936,"max":2.13,"median":2.0495,"std_dev":0.06355910634991652,"read_row":99997397,"read_byte":199994794,"time":[2.076,2.13,2.052,1.954,2.072,1.936,1.947,2.047,2.065,1.973],"error":[],"mean":2.0242003275159437},{"name":"Q31","sql":"SELECT SearchEngineID, ClientIP, COUNT(*) AS c, SUM(IsRefresh), AVG(ResolutionWidth) FROM hits WHERE SearchPhrase \u003c\u003e '' GROUP BY SearchEngineID, ClientIP ORDER BY c DESC LIMIT 10;","min":4.608,"max":5.197,"median":4.8215,"std_dev":0.1555558079115017,"read_row":99997397,"read_byte":2539595264,"time":[4.769,4.869,4.808,4.903,4.608,4.835,4.796,5.197],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":4.84567503980446},{"name":"Q32","sql":"SELECT WatchID, ClientIP, COUNT(*) AS c, SUM(IsRefresh), AVG(ResolutionWidth) FROM hits WHERE SearchPhrase \u003c\u003e '' GROUP BY WatchID, ClientIP ORDER BY c DESC LIMIT 10;","min":7.257,"max":7.923,"median":7.643000000000001,"std_dev":0.22186707732333796,"read_row":99997397,"read_byte":3139579646,"time":[7.257,7.581,7.834,7.705,7.486,7.923],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":7.6277517716570555},{"name":"Q33","sql":"SELECT WatchID, ClientIP, COUNT(*) AS c, SUM(IsRefresh), AVG(ResolutionWidth) FROM hits GROUP BY WatchID, ClientIP ORDER BY c DESC LIMIT 10;","min":41.012,"max":43.154,"median":41.556,"std_dev":0.8015595003822629,"read_row":99997397,"read_byte":1599958352,"time":[43.154,41.404,43.07,41.562,41.556,41.358,41.012],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":41.86611841165707},{"name":"Q34","sql":"SELECT URL, COUNT(*) AS c FROM hits GROUP BY URL ORDER BY c DESC LIMIT 10;","min":13.857,"max":14.565,"median":14.1765,"std_dev":0.27596863499318197,"read_row":99997397,"read_byte":9838815562,"time":[13.857,14.565,14.339,14.014],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":14.191070936727643},{"name":"Q35","sql":"SELECT 1, URL, COUNT(*) AS c FROM hits GROUP BY 1, URL ORDER BY c DESC LIMIT 10;","min":37.135,"max":38.944,"median":37.506,"std_dev":0.7145881611110009,"read_row":99997397,"read_byte":9838815562,"time":[37.506,37.137,38.326,38.944,37.135],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":37.80289059517546},{"name":"Q36","sql":"SELECT ClientIP, ClientIP - 1, ClientIP - 2, ClientIP - 3, COUNT(*) AS c FROM hits GROUP BY ClientIP, ClientIP - 1, ClientIP - 2, ClientIP - 3 ORDER BY c DESC LIMIT 10;","min":6.465,"max":7.284,"median":6.553,"std_dev":0.27223856584748224,"read_row":99997397,"read_byte":399989588,"time":[6.767,6.512,6.465,6.513,7.284,6.863,6.553],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}"],"mean":6.7027789501545145},{"name":"Q37","sql":"SELECT URL, COUNT(*) AS PageViews FROM hits WHERE CounterID = 62 AND EventDate \u003e= '2013-07-01' AND EventDate \u003c= '2013-07-31' AND DontCountHits = 0 AND IsRefresh = 0 AND URL \u003c\u003e '' GROUP BY URL ORDER BY PageViews DESC LIMIT 10;","min":2.366,"max":2.66,"median":2.5425,"std_dev":0.08607877529075071,"read_row":11870569,"read_byte":1181383544,"time":[2.524,2.539,2.366,2.66,2.547,2.546],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1068 Message:Cannot send flight data to endpoint, because sender is closed. Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":2.5288474324586967},{"name":"Q38","sql":"SELECT Title, COUNT(*) AS PageViews FROM hits WHERE CounterID = 62 AND EventDate \u003e= '2013-07-01' AND EventDate \u003c= '2013-07-31' AND DontCountHits = 0 AND IsRefresh = 0 AND Title \u003c\u003e '' GROUP BY Title ORDER BY PageViews DESC LIMIT 10;","min":2.312,"max":2.709,"median":2.4695,"std_dev":0.14048402044360778,"read_row":11870569,"read_byte":1520274306,"time":[2.709,2.699,2.34,2.344,2.541,2.571,2.399,2.312,2.387,2.54],"error":[],"mean":2.480273829964861},{"name":"Q39","sql":"SELECT URL, COUNT(*) AS PageViews FROM hits WHERE CounterID = 62 AND EventDate \u003e= '2013-07-01' AND EventDate \u003c= '2013-07-31' AND IsRefresh = 0 AND IsLink \u003c\u003e 0 AND IsDownload = 0 GROUP BY URL ORDER BY PageViews DESC LIMIT 10 OFFSET 1000;","min":2.356,"max":2.641,"median":2.5095,"std_dev":0.08921485302347365,"read_row":11870569,"read_byte":1205124682,"time":[2.592,2.605,2.356,2.496,2.641,2.41,2.42,2.451,2.523,2.547],"error":[],"mean":2.502506941721371},{"name":"Q40","sql":"SELECT TraficSourceID, SearchEngineID, AdvEngineID, CASE WHEN (SearchEngineID = 0 AND AdvEngineID = 0) THEN Referer ELSE '' END AS Src, URL AS Dst, COUNT(*) AS PageViews FROM hits WHERE CounterID = 62 AND EventDate \u003e= '2013-07-01' AND EventDate \u003c= '2013-07-31' AND IsRefresh = 0 GROUP BY TraficSourceID, SearchEngineID, AdvEngineID, Src, Dst ORDER BY PageViews DESC LIMIT 10 OFFSET 1000;","min":3.084,"max":3.875,"median":3.261,"std_dev":0.24393726192425386,"read_row":11870569,"read_byte":2172531550,"time":[3.084,3.439,3.261,3.875,3.248,3.142,3.306],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}"],"mean":3.328011908357748},{"name":"Q41","sql":"SELECT URLHash, EventDate, COUNT(*) AS PageViews FROM hits WHERE CounterID = 62 AND EventDate \u003e= '2013-07-01' AND EventDate \u003c= '2013-07-31' AND IsRefresh = 0 AND TraficSourceID IN (-1, 6) AND RefererHash = 3594120000172545465 GROUP BY URLHash, EventDate ORDER BY PageViews DESC LIMIT 10 OFFSET 100;","min":2.226,"max":2.424,"median":2.362,"std_dev":0.05579283108070428,"read_row":11870569,"read_byte":332375932,"time":[2.35,2.226,2.39,2.32,2.331,2.424,2.374,2.38,2.296,2.405],"error":[],"mean":2.3489287488659594},{"name":"Q42","sql":"SELECT WindowClientWidth, WindowClientHeight, COUNT(*) AS PageViews FROM hits WHERE CounterID = 62 AND EventDate \u003e= '2013-07-01' AND EventDate \u003c= '2013-07-31' AND IsRefresh = 0 AND DontCountHits = 0 AND URLHash = 2868770270353813622 GROUP BY WindowClientWidth, WindowClientHeight ORDER BY PageViews DESC LIMIT 10 OFFSET 10000;","min":2.24,"max":3.208,"median":2.496,"std_dev":0.25628673395242296,"read_row":11870569,"read_byte":284893656,"time":[2.562,3.208,2.478,2.514,2.24,2.338,2.566,2.268,2.467,2.528],"error":[],"mean":2.5050814479655092},{"name":"Q43","sql":"SELECT DATE_TRUNC('minute', EventTime) AS M, COUNT(*) AS PageViews FROM hits WHERE CounterID = 62 AND EventDate \u003e= '2013-07-14' AND EventDate \u003c= '2013-07-15' AND IsRefresh = 0 AND DontCountHits = 0 GROUP BY DATE_TRUNC('minute', EventTime) ORDER BY DATE_TRUNC('minute', EventTime) LIMIT 10 OFFSET 1000;","min":2.223,"max":2.675,"median":2.451,"std_dev":0.132275621336662,"read_row":11870569,"read_byte":237411380,"time":[2.475,2.675,2.345,2.471,2.223,2.431,2.423,2.569,2.659,2.385],"error":[],"mean":2.4620469149723}]}