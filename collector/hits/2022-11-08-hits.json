{"metadata":{"table":"hits","tag":"v0.8.103-nightly","size":"Large"},"schema":[{"name":"Q1","sql":"SELECT COUNT(*) FROM hits;","min":0.087,"max":0.16,"median":0.126,"std_dev":0.02148045623351609,"read_row":1,"read_byte":1,"time":[0.126,0.14,0.087,0.16,0.126,0.115,0.088,0.136,0.136,0.119],"error":[],"mean":0.12129177878690349},{"name":"Q2","sql":"SELECT COUNT(*) FROM hits WHERE AdvEngineID \u003c\u003e 0;","min":1.121,"max":1.393,"median":1.232,"std_dev":0.07814371375868952,"read_row":99997397,"read_byte":199994794,"time":[1.393,1.299,1.337,1.222,1.242,1.212,1.198,1.194,1.328,1.121],"error":[],"mean":1.2521754732774604},{"name":"Q3","sql":"SELECT SUM(AdvEngineID), COUNT(*), AVG(ResolutionWidth) FROM hits;","min":1.245,"max":1.476,"median":1.388,"std_dev":0.07672737451522757,"read_row":99997397,"read_byte":399989588,"time":[1.378,1.264,1.245,1.347,1.408,1.28,1.46,1.476,1.398,1.413],"error":[],"mean":1.3647196379179516},{"name":"Q4","sql":"SELECT AVG(UserID) FROM hits;","min":1.288,"max":2.28,"median":1.537,"std_dev":0.28828811976909485,"read_row":99997397,"read_byte":799979176,"time":[1.361,1.836,1.55,1.592,1.331,1.288,1.524,2.28,1.299,1.565],"error":[],"mean":1.5392681348015855},{"name":"Q5","sql":"SELECT COUNT(DISTINCT UserID) FROM hits;","min":5.139,"max":5.377,"median":5.184,"std_dev":0.06838537855419091,"read_row":99997397,"read_byte":799979176,"time":[5.169,5.176,5.175,5.192,5.377,5.2,5.276,5.224,5.139,5.14],"error":[],"mean":5.206356359753447},{"name":"Q6","sql":"SELECT COUNT(DISTINCT SearchPhrase) FROM hits;","min":3.196,"max":3.43,"median":3.2915,"std_dev":0.06691404934690469,"read_row":99997397,"read_byte":1539621262,"time":[3.29,3.317,3.391,3.293,3.253,3.279,3.43,3.196,3.381,3.281],"error":[],"mean":3.310425862047796},{"name":"Q7","sql":"SELECT MIN(EventDate), MAX(EventDate) FROM hits;","min":1.074,"max":1.39,"median":1.2930000000000001,"std_dev":0.09233531285483355,"read_row":99997397,"read_byte":399989588,"time":[1.39,1.326,1.249,1.203,1.376,1.24,1.26,1.074,1.357,1.348],"error":[],"mean":1.2788131914690484},{"name":"Q8","sql":"SELECT AdvEngineID, COUNT(*) FROM hits WHERE AdvEngineID \u003c\u003e 0 GROUP BY AdvEngineID ORDER BY COUNT(*) DESC;","min":1.952,"max":2.117,"median":2.0425,"std_dev":0.04899887753816408,"read_row":99997397,"read_byte":199994794,"time":[2.025,2.086,2.117,2.05,2.035,2.087,2.011,2.114,2.022,1.952],"error":[],"mean":2.049311103551384},{"name":"Q9","sql":"SELECT RegionID, COUNT(DISTINCT UserID) AS u FROM hits GROUP BY RegionID ORDER BY u DESC LIMIT 10;","min":2.565,"max":3.066,"median":2.806,"std_dev":0.14840035938860346,"read_row":99997397,"read_byte":1199968764,"time":[2.806,2.721,3.066,2.565,2.626,2.785,2.934,2.841,2.928],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}"],"mean":2.804068856478327},{"name":"Q10","sql":"SELECT RegionID, SUM(AdvEngineID), COUNT(*) AS c, AVG(ResolutionWidth), COUNT(DISTINCT UserID) FROM hits GROUP BY RegionID ORDER BY c DESC LIMIT 10;","min":2.734,"max":3.205,"median":2.849,"std_dev":0.15658618832770663,"read_row":99997397,"read_byte":1599958352,"time":[3.205,3.122,2.816,2.854,2.844,2.78,2.904,2.734],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}"],"mean":2.9032847490527227},{"name":"Q11","sql":"SELECT MobilePhoneModel, COUNT(DISTINCT UserID) AS u FROM hits WHERE MobilePhoneModel \u003c\u003e '' GROUP BY MobilePhoneModel ORDER BY u DESC LIMIT 10;","min":2.04,"max":2.354,"median":2.178,"std_dev":0.09596879701236227,"read_row":99997397,"read_byte":1623244968,"time":[2.179,2.185,2.177,2.288,2.28,2.084,2.153,2.077,2.04,2.354],"error":[],"mean":2.1796024302204415},{"name":"Q12","sql":"SELECT MobilePhone, MobilePhoneModel, COUNT(DISTINCT UserID) AS u FROM hits WHERE MobilePhoneModel \u003c\u003e '' GROUP BY MobilePhone, MobilePhoneModel ORDER BY u DESC LIMIT 10;","min":2.077,"max":5.517,"median":2.3085,"std_dev":0.9825162644964206,"read_row":99997397,"read_byte":1823239762,"time":[2.443,5.517,2.077,2.089,2.213,2.152,2.488,2.262,2.355,2.381],"error":[],"mean":2.479658280333069},{"name":"Q13","sql":"SELECT SearchPhrase, COUNT(*) AS c FROM hits WHERE SearchPhrase \u003c\u003e '' GROUP BY SearchPhrase ORDER BY c DESC LIMIT 10;","min":3.607,"max":4.134,"median":3.729,"std_dev":0.16742656396458624,"read_row":99997397,"read_byte":1539621262,"time":[3.784,3.74,3.646,3.675,4.134,4.025,3.607,3.717,3.729],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":3.7805203114019768},{"name":"Q14","sql":"SELECT SearchPhrase, COUNT(DISTINCT UserID) AS u FROM hits WHERE SearchPhrase \u003c\u003e '' GROUP BY SearchPhrase ORDER BY u DESC LIMIT 10;","min":3.854,"max":5.031,"median":4.177,"std_dev":0.3528284143886372,"read_row":99997397,"read_byte":2339600438,"time":[3.854,3.96,4.622,5.031,4.074,4.049,3.987,4.28,4.524,4.478],"error":[],"mean":4.271846753856182},{"name":"Q15","sql":"SELECT SearchEngineID, SearchPhrase, COUNT(*) AS c FROM hits WHERE SearchPhrase \u003c\u003e '' GROUP BY SearchEngineID, SearchPhrase ORDER BY c DESC LIMIT 10;","min":3.777,"max":4.209,"median":4.0425,"std_dev":0.11434426089664479,"read_row":99997397,"read_byte":1739616056,"time":[4.154,4.047,3.947,3.777,4.038,4.017,4.095,3.951,4.068,4.209],"error":[],"mean":4.028656841172754},{"name":"Q16","sql":"SELECT UserID, COUNT(*) FROM hits GROUP BY UserID ORDER BY COUNT(*) DESC LIMIT 10;","min":6.256,"max":12.486,"median":6.673,"std_dev":1.7706694327287633,"read_row":99997397,"read_byte":799979176,"time":[12.486,6.703,6.473,6.447,6.854,6.681,6.665,6.256,6.591,6.838],"error":[],"mean":7.043554350167451},{"name":"Q17","sql":"SELECT UserID, SearchPhrase, COUNT(*) FROM hits GROUP BY UserID, SearchPhrase ORDER BY COUNT(*) DESC LIMIT 10;","min":20.739,"max":21.599,"median":21.087,"std_dev":0.2840823215761564,"read_row":99997397,"read_byte":2339600438,"time":[20.81,20.739,21.528,21.005,21.087,21.599,21.309,21.136,20.922],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":21.124207222879217},{"name":"Q18","sql":"SELECT UserID, SearchPhrase, COUNT(*) FROM hits GROUP BY UserID, SearchPhrase LIMIT 10;","min":4.73,"max":4.871,"median":4.84,"std_dev":0.05550399875280175,"read_row":99997397,"read_byte":2339600438,"time":[4.739,4.846,4.864,4.84,4.73,4.774,4.871],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":4.808821713029501},{"name":"Q19","sql":"SELECT UserID, extract(minute FROM EventTime) AS m, SearchPhrase, COUNT(*) FROM hits GROUP BY UserID, m, SearchPhrase ORDER BY COUNT(*) DESC LIMIT 10;","min":61.243,"max":62.552,"median":61.4955,"std_dev":0.35635269046269313,"read_row":99997397,"read_byte":3139579614,"time":[61.552,61.421,61.33,61.243,61.723,61.439,61.577,61.291,62.552,61.576],"error":[],"mean":61.56937634766869},{"name":"Q20","sql":"SELECT UserID FROM hits WHERE UserID = 435090932899640449;","min":1.185,"max":1.376,"median":1.3335,"std_dev":0.06901949000101347,"read_row":89403,"read_byte":715224,"time":[1.376,1.23,1.358,1.249,1.185,1.311,1.37,1.361,1.356,1.223],"error":[],"mean":1.3000413424255994},{"name":"Q21","sql":"SELECT COUNT(*) FROM hits WHERE URL LIKE '%google%';","min":2.487,"max":2.78,"median":2.5564999999999998,"std_dev":0.08812088288254939,"read_row":99997397,"read_byte":9838815530,"time":[2.487,2.54,2.537,2.653,2.78,2.56,2.496,2.671,2.553,2.654],"error":[],"mean":2.591625343558152},{"name":"Q22","sql":"SELECT SearchPhrase, MIN(URL), COUNT(*) AS c FROM hits WHERE URL LIKE '%google%' AND SearchPhrase \u003c\u003e '' GROUP BY SearchPhrase ORDER BY c DESC LIMIT 10;","min":3.342,"max":4.607,"median":3.5415,"std_dev":0.3785602329880941,"read_row":99997397,"read_byte":11378436792,"time":[3.378,3.525,3.342,4.174,4.607,3.708,3.451,3.515,3.558,3.607],"error":[],"mean":3.6687303875519226},{"name":"Q23","sql":"SELECT SearchPhrase, MIN(URL), MIN(Title), COUNT(*) AS c, COUNT(DISTINCT UserID) FROM hits WHERE Title LIKE '%Google%' AND URL NOT LIKE '%.google.%' AND SearchPhrase \u003c\u003e '' GROUP BY SearchPhrase ORDER BY c DESC LIMIT 10;","min":5.398,"max":6.643,"median":5.686,"std_dev":0.3785237641152799,"read_row":99997397,"read_byte":22396098351,"time":[5.595,5.398,5.671,5.489,5.891,6.643,5.932,5.639,6.397,5.701],"error":[],"mean":5.8238070161377475},{"name":"Q24","sql":"SELECT * FROM hits WHERE URL LIKE '%google%' ORDER BY EventTime LIMIT 10;","min":9.843,"max":10.75,"median":10.301,"std_dev":0.2522010309257278,"read_row":99997397,"read_byte":79840595866,"time":[9.843,10.339,10.449,10.263,10.116,10.75,10.405,10.212,9.938,10.447],"error":[],"mean":10.27310162026626},{"name":"Q25","sql":"SELECT SearchPhrase FROM hits WHERE SearchPhrase \u003c\u003e '' ORDER BY EventTime LIMIT 10;","min":3.82,"max":5.798,"median":4.837,"std_dev":0.68282015201662,"read_row":99997397,"read_byte":2339600438,"time":[4.689,4.407,5.464,5.645,4.34,5.798,4.985,3.82,4.223,5.767],"error":[],"mean":4.865713594429787},{"name":"Q26","sql":"SELECT SearchPhrase FROM hits WHERE SearchPhrase \u003c\u003e '' ORDER BY SearchPhrase LIMIT 10;","min":3.466,"max":5.863,"median":4.106,"std_dev":0.7754871307765205,"read_row":99997397,"read_byte":1539621262,"time":[5.863,4.108,5.168,4.104,3.718,4.451,5.341,3.608,3.466,3.884],"error":[],"mean":4.3063012236704585},{"name":"Q27","sql":"SELECT SearchPhrase FROM hits WHERE SearchPhrase \u003c\u003e '' ORDER BY EventTime, SearchPhrase LIMIT 10;","min":3.976,"max":5.942,"median":4.6515,"std_dev":0.6291193845368301,"read_row":99997397,"read_byte":2339600438,"time":[3.976,4.343,4.727,5.167,5.637,4.134,4.576,4.95,4.148,5.942],"error":[],"mean":4.719914576284109},{"name":"Q28","sql":"SELECT CounterID, AVG(length(URL)) AS l, COUNT(*) AS c FROM hits WHERE URL \u003c\u003e '' GROUP BY CounterID HAVING COUNT(*) \u003e 100000 ORDER BY l DESC LIMIT 25;","min":3.457,"max":3.785,"median":3.5709999999999997,"std_dev":0.09647300140453806,"read_row":99997397,"read_byte":10238805118,"time":[3.785,3.572,3.621,3.457,3.57,3.686,3.466,3.523,3.623,3.511],"error":[],"mean":3.5801144874709565},{"name":"Q30","sql":"SELECT SUM(ResolutionWidth), SUM(ResolutionWidth + 1), SUM(ResolutionWidth + 2), SUM(ResolutionWidth + 3), SUM(ResolutionWidth + 4), SUM(ResolutionWidth + 5), SUM(ResolutionWidth + 6), SUM(ResolutionWidth + 7), SUM(ResolutionWidth + 8), SUM(ResolutionWidth + 9), SUM(ResolutionWidth + 10), SUM(ResolutionWidth + 11), SUM(ResolutionWidth + 12), SUM(ResolutionWidth + 13), SUM(ResolutionWidth + 14), SUM(ResolutionWidth + 15), SUM(ResolutionWidth + 16), SUM(ResolutionWidth + 17), SUM(ResolutionWidth + 18), SUM(ResolutionWidth + 19), SUM(ResolutionWidth + 20), SUM(ResolutionWidth + 21), SUM(ResolutionWidth + 22), SUM(ResolutionWidth + 23), SUM(ResolutionWidth + 24), SUM(ResolutionWidth + 25), SUM(ResolutionWidth + 26), SUM(ResolutionWidth + 27), SUM(ResolutionWidth + 28), SUM(ResolutionWidth + 29), SUM(ResolutionWidth + 30), SUM(ResolutionWidth + 31), SUM(ResolutionWidth + 32), SUM(ResolutionWidth + 33), SUM(ResolutionWidth + 34), SUM(ResolutionWidth + 35), SUM(ResolutionWidth + 36), SUM(ResolutionWidth + 37), SUM(ResolutionWidth + 38), SUM(ResolutionWidth + 39), SUM(ResolutionWidth + 40), SUM(ResolutionWidth + 41), SUM(ResolutionWidth + 42), SUM(ResolutionWidth + 43), SUM(ResolutionWidth + 44), SUM(ResolutionWidth + 45), SUM(ResolutionWidth + 46), SUM(ResolutionWidth + 47), SUM(ResolutionWidth + 48), SUM(ResolutionWidth + 49), SUM(ResolutionWidth + 50), SUM(ResolutionWidth + 51), SUM(ResolutionWidth + 52), SUM(ResolutionWidth + 53), SUM(ResolutionWidth + 54), SUM(ResolutionWidth + 55), SUM(ResolutionWidth + 56), SUM(ResolutionWidth + 57), SUM(ResolutionWidth + 58), SUM(ResolutionWidth + 59), SUM(ResolutionWidth + 60), SUM(ResolutionWidth + 61), SUM(ResolutionWidth + 62), SUM(ResolutionWidth + 63), SUM(ResolutionWidth + 64), SUM(ResolutionWidth + 65), SUM(ResolutionWidth + 66), SUM(ResolutionWidth + 67), SUM(ResolutionWidth + 68), SUM(ResolutionWidth + 69), SUM(ResolutionWidth + 70), SUM(ResolutionWidth + 71), SUM(ResolutionWidth + 72), SUM(ResolutionWidth + 73), SUM(ResolutionWidth + 74), SUM(ResolutionWidth + 75), SUM(ResolutionWidth + 76), SUM(ResolutionWidth + 77), SUM(ResolutionWidth + 78), SUM(ResolutionWidth + 79), SUM(ResolutionWidth + 80), SUM(ResolutionWidth + 81), SUM(ResolutionWidth + 82), SUM(ResolutionWidth + 83), SUM(ResolutionWidth + 84), SUM(ResolutionWidth + 85), SUM(ResolutionWidth + 86), SUM(ResolutionWidth + 87), SUM(ResolutionWidth + 88), SUM(ResolutionWidth + 89) FROM hits;","min":1.937,"max":2.243,"median":2.0465,"std_dev":0.08154685769543789,"read_row":99997397,"read_byte":199994794,"time":[2.034,2.087,2.077,2.054,2.243,2.039,2.165,1.937,1.996,2.029],"error":[],"mean":2.0645180955094102},{"name":"Q31","sql":"SELECT SearchEngineID, ClientIP, COUNT(*) AS c, SUM(IsRefresh), AVG(ResolutionWidth) FROM hits WHERE SearchPhrase \u003c\u003e '' GROUP BY SearchEngineID, ClientIP ORDER BY c DESC LIMIT 10;","min":4.377,"max":5.527,"median":4.5585,"std_dev":0.350281226302524,"read_row":99997397,"read_byte":2539595232,"time":[4.377,4.517,4.426,4.6,4.728,4.402,5.527,4.645],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}"],"mean":4.64060732202862},{"name":"Q32","sql":"SELECT WatchID, ClientIP, COUNT(*) AS c, SUM(IsRefresh), AVG(ResolutionWidth) FROM hits WHERE SearchPhrase \u003c\u003e '' GROUP BY WatchID, ClientIP ORDER BY c DESC LIMIT 10;","min":7.113,"max":7.866,"median":7.309,"std_dev":0.20423467499211717,"read_row":99997397,"read_byte":3139579614,"time":[7.113,7.505,7.359,7.309,7.239,7.242,7.348,7.866,7.282],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}"],"mean":7.359794383594019},{"name":"Q33","sql":"SELECT WatchID, ClientIP, COUNT(*) AS c, SUM(IsRefresh), AVG(ResolutionWidth) FROM hits GROUP BY WatchID, ClientIP ORDER BY c DESC LIMIT 10;","min":40.339,"max":46.117,"median":41.0445,"std_dev":1.7468466187318787,"read_row":99997397,"read_byte":1599958352,"time":[40.739,41.488,40.862,46.117,41.512,40.339,41.227,40.613],"error":["request got bad status: 500 req= resp={\"error\":{\"kind\":\"InternalError\",\"message\":\"proxy upstream failed: EOF\"}}","request got bad status: 404 req= resp=query id not found df8e6eae-9835-44a8-906b-c52ebd9a2cd0"],"mean":41.57740597887764},{"name":"Q34","sql":"SELECT URL, COUNT(*) AS c FROM hits GROUP BY URL ORDER BY c DESC LIMIT 10;","min":12.934,"max":14.885,"median":13.561,"std_dev":0.6068431977592454,"read_row":99997397,"read_byte":9838815530,"time":[12.934,14.885,13.311,13.677,13.445,13.78],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":13.658894219737077},{"name":"Q35","sql":"SELECT 1, URL, COUNT(*) AS c FROM hits GROUP BY 1, URL ORDER BY c DESC LIMIT 10;","min":36.224,"max":42.704,"median":37.6455,"std_dev":2.535997178133289,"read_row":99997397,"read_byte":9838815530,"time":[42.704,36.224,38.489,36.802],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":38.47408078601089},{"name":"Q36","sql":"SELECT ClientIP, ClientIP - 1, ClientIP - 2, ClientIP - 3, COUNT(*) AS c FROM hits GROUP BY ClientIP, ClientIP - 1, ClientIP - 2, ClientIP - 3 ORDER BY c DESC LIMIT 10;","min":6.247,"max":6.696,"median":6.4585,"std_dev":0.16893004284318408,"read_row":99997397,"read_byte":399989588,"time":[6.696,6.332,6.337,6.247,6.656,6.294,6.58,6.585],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":6.463669784492478},{"name":"Q37","sql":"SELECT URL, COUNT(*) AS PageViews FROM hits WHERE CounterID = 62 AND EventDate \u003e= '2013-07-01' AND EventDate \u003c= '2013-07-31' AND DontCountHits = 0 AND IsRefresh = 0 AND URL \u003c\u003e '' GROUP BY URL ORDER BY PageViews DESC LIMIT 10;","min":2.015,"max":2.444,"median":2.227,"std_dev":0.13178358615642125,"read_row":12458742,"read_byte":1226485840,"time":[2.015,2.189,2.268,2.227,2.368,2.122,2.082,2.444,2.323],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}"],"mean":2.222537737118554},{"name":"Q38","sql":"SELECT Title, COUNT(*) AS PageViews FROM hits WHERE CounterID = 62 AND EventDate \u003e= '2013-07-01' AND EventDate \u003c= '2013-07-31' AND DontCountHits = 0 AND IsRefresh = 0 AND Title \u003c\u003e '' GROUP BY Title ORDER BY PageViews DESC LIMIT 10;","min":2.047,"max":2.259,"median":2.1185,"std_dev":0.07370379908797105,"read_row":12458742,"read_byte":1610694086,"time":[2.114,2.074,2.058,2.047,2.128,2.241,2.123,2.089,2.259,2.222],"error":[],"mean":2.134243241387457},{"name":"Q39","sql":"SELECT URL, COUNT(*) AS PageViews FROM hits WHERE CounterID = 62 AND EventDate \u003e= '2013-07-01' AND EventDate \u003c= '2013-07-31' AND IsRefresh = 0 AND IsLink \u003c\u003e 0 AND IsDownload = 0 GROUP BY URL ORDER BY PageViews DESC LIMIT 10 OFFSET 1000;","min":2.077,"max":2.811,"median":2.1645,"std_dev":0.25297786464432026,"read_row":12458742,"read_byte":1251403324,"time":[2.162,2.811,2.086,2.077,2.26,2.39,2.123,2.166,2.163,2.732],"error":[],"mean":2.284083274761016},{"name":"Q40","sql":"SELECT TraficSourceID, SearchEngineID, AdvEngineID, CASE WHEN (SearchEngineID = 0 AND AdvEngineID = 0) THEN Referer ELSE '' END AS Src, URL AS Dst, COUNT(*) AS PageViews FROM hits WHERE CounterID = 62 AND EventDate \u003e= '2013-07-01' AND EventDate \u003c= '2013-07-31' AND IsRefresh = 0 GROUP BY TraficSourceID, SearchEngineID, AdvEngineID, Src, Dst ORDER BY PageViews DESC LIMIT 10 OFFSET 1000;","min":3.032,"max":3.13,"median":3.081,"std_dev":0.04899999999999993,"read_row":12458742,"read_byte":2263841575,"time":[3.13,3.032],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":3.080610329139341},{"name":"Q41","sql":"SELECT URLHash, EventDate, COUNT(*) AS PageViews FROM hits WHERE CounterID = 62 AND EventDate \u003e= '2013-07-01' AND EventDate \u003c= '2013-07-31' AND IsRefresh = 0 AND TraficSourceID IN (-1, 6) AND RefererHash = 3594120000172545465 GROUP BY URLHash, EventDate ORDER BY PageViews DESC LIMIT 10 OFFSET 100;","min":1.878,"max":2.27,"median":2.059,"std_dev":0.11982337000769093,"read_row":12458742,"read_byte":348844776,"time":[2.27,2.167,2.173,2.004,2.132,2.078,1.882,1.878,2.04,2.02],"error":[],"mean":2.0609011897147003},{"name":"Q42","sql":"SELECT WindowClientWidth, WindowClientHeight, COUNT(*) AS PageViews FROM hits WHERE CounterID = 62 AND EventDate \u003e= '2013-07-01' AND EventDate \u003c= '2013-07-31' AND IsRefresh = 0 AND DontCountHits = 0 AND URLHash = 2868770270353813622 GROUP BY WindowClientWidth, WindowClientHeight ORDER BY PageViews DESC LIMIT 10 OFFSET 10000;","min":2.005,"max":2.146,"median":2.105,"std_dev":0.04523228935174517,"read_row":12458742,"read_byte":299009808,"time":[2.062,2.113,2.023,2.005,2.092,2.132,2.134,2.097,2.114,2.146],"error":[],"mean":2.0913055232041535},{"name":"Q43","sql":"SELECT DATE_TRUNC('minute', EventTime) AS M, COUNT(*) AS PageViews FROM hits WHERE CounterID = 62 AND EventDate \u003e= '2013-07-14' AND EventDate \u003c= '2013-07-15' AND IsRefresh = 0 AND DontCountHits = 0 GROUP BY DATE_TRUNC('minute', EventTime) ORDER BY DATE_TRUNC('minute', EventTime) LIMIT 10 OFFSET 1000;","min":1.833,"max":2.463,"median":2.068,"std_dev":0.16233927436082746,"read_row":12458742,"read_byte":249174840,"time":[2.024,1.958,2.463,2.105,2.031,1.94,2.12,2.18,2.14,1.833],"error":[],"mean":2.073299272898545}]}