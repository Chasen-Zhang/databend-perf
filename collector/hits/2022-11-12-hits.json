{"metadata":{"table":"hits","tag":"v0.8.108-nightly","size":"Large"},"schema":[{"name":"Q1","sql":"SELECT COUNT(*) FROM hits;","min":0.09,"max":0.175,"median":0.124,"std_dev":0.02521031534907884,"read_row":1,"read_byte":1,"time":[0.12,0.128,0.09,0.112,0.118,0.105,0.132,0.14,0.175,0.168],"error":[],"mean":0.12641460009806454},{"name":"Q2","sql":"SELECT COUNT(*) FROM hits WHERE AdvEngineID \u003c\u003e 0;","min":1.292,"max":1.606,"median":1.4245,"std_dev":0.08491548739776508,"read_row":99257626,"read_byte":198515252,"time":[1.606,1.435,1.407,1.325,1.505,1.368,1.454,1.414,1.292,1.45],"error":[],"mean":1.423106606189497},{"name":"Q3","sql":"SELECT SUM(AdvEngineID), COUNT(*), AVG(ResolutionWidth) FROM hits;","min":1.312,"max":3.364,"median":1.4575,"std_dev":0.5964007377594364,"read_row":99997397,"read_byte":399989588,"time":[1.406,1.505,1.41,1.335,1.354,1.312,1.528,1.652,2.08,3.364],"error":[],"mean":1.6206257748862616},{"name":"Q4","sql":"SELECT AVG(UserID) FROM hits;","min":1.235,"max":1.896,"median":1.4465,"std_dev":0.16849691391832666,"read_row":99997397,"read_byte":799979176,"time":[1.604,1.417,1.439,1.563,1.384,1.454,1.235,1.516,1.896,1.369],"error":[],"mean":1.4787346255367155},{"name":"Q5","sql":"SELECT COUNT(DISTINCT UserID) FROM hits;","min":4.888,"max":5.196,"median":4.9665,"std_dev":0.10263064844382493,"read_row":99997397,"read_byte":799979176,"time":[5.045,4.924,4.888,5.196,4.937,4.949,4.951,4.982,5.019,5.194],"error":[],"mean":5.007461196835632},{"name":"Q6","sql":"SELECT COUNT(DISTINCT SearchPhrase) FROM hits;","min":3.273,"max":3.562,"median":3.3594999999999997,"std_dev":0.09339036352857823,"read_row":99997397,"read_byte":1539621294,"time":[3.273,3.345,3.364,3.461,3.32,3.562,3.491,3.295,3.355,3.496],"error":[],"mean":3.3949242848232726},{"name":"Q7","sql":"SELECT MIN(EventDate), MAX(EventDate) FROM hits;","min":1.26,"max":1.49,"median":1.355,"std_dev":0.0815551960331161,"read_row":99997397,"read_byte":399989588,"time":[1.286,1.464,1.292,1.399,1.26,1.268,1.393,1.49,1.436,1.317],"error":[],"mean":1.3580725376269296},{"name":"Q8","sql":"SELECT AdvEngineID, COUNT(*) FROM hits WHERE AdvEngineID \u003c\u003e 0 GROUP BY AdvEngineID ORDER BY COUNT(*) DESC;","min":2.141,"max":2.493,"median":2.3360000000000003,"std_dev":0.10482180116750518,"read_row":99257626,"read_byte":198515252,"time":[2.33,2.37,2.141,2.493,2.342,2.318,2.417,2.386,2.157,2.253],"error":[],"mean":2.318302994465146},{"name":"Q9","sql":"SELECT RegionID, COUNT(DISTINCT UserID) AS u FROM hits GROUP BY RegionID ORDER BY u DESC LIMIT 10;","min":2.816,"max":4.085,"median":3.005,"std_dev":0.41727815870039875,"read_row":99997397,"read_byte":1199968764,"time":[3.09,3.748,2.943,2.816,2.836,3.005,2.95,4.085,3.01],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}"],"mean":3.1399561511248053},{"name":"Q10","sql":"SELECT RegionID, SUM(AdvEngineID), COUNT(*) AS c, AVG(ResolutionWidth), COUNT(DISTINCT UserID) FROM hits GROUP BY RegionID ORDER BY c DESC LIMIT 10;","min":2.892,"max":9.776,"median":3.0545,"std_dev":2.513736577951901,"read_row":99997397,"read_byte":1599958352,"time":[3.102,9.776,3.207,2.892,2.973,3.007],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":3.6875515087227964},{"name":"Q11","sql":"SELECT MobilePhoneModel, COUNT(DISTINCT UserID) AS u FROM hits WHERE MobilePhoneModel \u003c\u003e '' GROUP BY MobilePhoneModel ORDER BY u DESC LIMIT 10;","min":2.133,"max":4.131,"median":2.267,"std_dev":0.5597781346212087,"read_row":99997397,"read_byte":1623245000,"time":[2.258,2.245,2.133,4.131,2.242,2.378,2.455,2.223,2.276,2.391],"error":[],"mean":2.4263735244300264},{"name":"Q12","sql":"SELECT MobilePhone, MobilePhoneModel, COUNT(DISTINCT UserID) AS u FROM hits WHERE MobilePhoneModel \u003c\u003e '' GROUP BY MobilePhone, MobilePhoneModel ORDER BY u DESC LIMIT 10;","min":2.168,"max":4.19,"median":2.3705,"std_dev":0.5559789654294487,"read_row":99997397,"read_byte":1823239794,"time":[2.324,2.168,2.355,4.19,2.399,2.356,2.326,2.442,2.385,2.412],"error":[],"mean":2.490535248618361},{"name":"Q13","sql":"SELECT SearchPhrase, COUNT(*) AS c FROM hits WHERE SearchPhrase \u003c\u003e '' GROUP BY SearchPhrase ORDER BY c DESC LIMIT 10;","min":3.543,"max":4.976,"median":3.991,"std_dev":0.4078059262313236,"read_row":99997397,"read_byte":1539621294,"time":[3.543,3.861,3.991,4.976,4.005,4.112,3.971],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}"],"mean":4.046542266384871},{"name":"Q14","sql":"SELECT SearchPhrase, COUNT(DISTINCT UserID) AS u FROM hits WHERE SearchPhrase \u003c\u003e '' GROUP BY SearchPhrase ORDER BY u DESC LIMIT 10;","min":4.148,"max":4.613,"median":4.336,"std_dev":0.17317621083740126,"read_row":99997397,"read_byte":2339600470,"time":[4.586,4.202,4.148,4.334,4.613,4.548,4.219,4.338],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":4.370087091412197},{"name":"Q15","sql":"SELECT SearchEngineID, SearchPhrase, COUNT(*) AS c FROM hits WHERE SearchPhrase \u003c\u003e '' GROUP BY SearchEngineID, SearchPhrase ORDER BY c DESC LIMIT 10;","min":3.862,"max":4.219,"median":4.1,"std_dev":0.11328172844726554,"read_row":99997397,"read_byte":1739616088,"time":[4.206,4.031,3.97,4.097,4.103,3.862,4.219,4.148],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}"],"mean":4.0779094176343635},{"name":"Q16","sql":"SELECT UserID, COUNT(*) FROM hits GROUP BY UserID ORDER BY COUNT(*) DESC LIMIT 10;","min":6.576,"max":7.109,"median":6.657500000000001,"std_dev":0.19112386908320306,"read_row":99997397,"read_byte":799979176,"time":[6.576,6.603,6.706,7.109,6.609,6.879],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":6.744338679586696},{"name":"Q17","sql":"SELECT UserID, SearchPhrase, COUNT(*) FROM hits GROUP BY UserID, SearchPhrase ORDER BY COUNT(*) DESC LIMIT 10;","min":20.403,"max":21.173,"median":20.685,"std_dev":0.23614172350570944,"read_row":99997397,"read_byte":2339600470,"time":[20.647,20.543,20.697,20.685,20.403,20.901,20.593,21.173,21.058],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":20.743105480478537},{"name":"Q18","sql":"SELECT UserID, SearchPhrase, COUNT(*) FROM hits GROUP BY UserID, SearchPhrase LIMIT 10;","min":4.741,"max":5.96,"median":5.075,"std_dev":0.3717571623453973,"read_row":99997397,"read_byte":2339600470,"time":[4.978,5.96,5.075,4.811,5.143,5.121,4.741],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}"],"mean":5.105744942797309},{"name":"Q19","sql":"SELECT UserID, extract(minute FROM EventTime) AS m, SearchPhrase, COUNT(*) FROM hits GROUP BY UserID, m, SearchPhrase ORDER BY COUNT(*) DESC LIMIT 10;","min":59.056,"max":61.036,"median":60.362,"std_dev":0.6421775070938601,"read_row":99997397,"read_byte":3139579646,"time":[60.393,59.25,60.477,60.362,59.875,61.036,59.635,59.056,60.778],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":60.09234036343254},{"name":"Q20","sql":"SELECT UserID FROM hits WHERE UserID = 435090932899640449;","min":1.16,"max":1.423,"median":1.3599999999999999,"std_dev":0.08985104339961779,"read_row":631929,"read_byte":5055432,"time":[1.423,1.388,1.399,1.391,1.243,1.29,1.209,1.16,1.332,1.418],"error":[],"mean":1.3221675058170401},{"name":"Q21","sql":"SELECT COUNT(*) FROM hits WHERE URL LIKE '%google%';","min":2.825,"max":3.817,"median":2.9485,"std_dev":0.2741603362997646,"read_row":99997397,"read_byte":9838815562,"time":[3.031,2.863,2.897,2.975,2.954,2.943,2.876,3.817,2.825,3.098],"error":[],"mean":3.016931440595239},{"name":"Q22","sql":"SELECT SearchPhrase, MIN(URL), COUNT(*) AS c FROM hits WHERE URL LIKE '%google%' AND SearchPhrase \u003c\u003e '' GROUP BY SearchPhrase ORDER BY c DESC LIMIT 10;","min":3.934,"max":4.636,"median":4.0375,"std_dev":0.20339803342215473,"read_row":99997397,"read_byte":11378436856,"time":[3.962,3.934,3.986,3.974,4.052,4.111,4.636,4.302,4.037,4.038],"error":[],"mean":4.098424881511752},{"name":"Q23","sql":"SELECT SearchPhrase, MIN(URL), MIN(Title), COUNT(*) AS c, COUNT(DISTINCT UserID) FROM hits WHERE Title LIKE '%Google%' AND URL NOT LIKE '%.google.%' AND SearchPhrase \u003c\u003e '' GROUP BY SearchPhrase ORDER BY c DESC LIMIT 10;","min":5.88,"max":7.793,"median":6.114,"std_dev":0.5286842157658956,"read_row":99997397,"read_byte":22381782047,"time":[6.544,6.143,7.793,6.421,6.18,5.973,6.085,6.041,6.06,5.88],"error":[],"mean":6.292064284435801},{"name":"Q24","sql":"SELECT * FROM hits WHERE URL LIKE '%google%' ORDER BY EventTime LIMIT 10;","min":8.991,"max":9.699,"median":9.093499999999999,"std_dev":0.24456810912300064,"read_row":99997397,"read_byte":78109285651,"time":[9.154,8.999,9.409,8.996,8.991,9.699,9.104,9.078,9.083,9.575],"error":[],"mean":9.20560541708563},{"name":"Q25","sql":"SELECT SearchPhrase FROM hits WHERE SearchPhrase \u003c\u003e '' ORDER BY EventTime LIMIT 10;","min":3.573,"max":4.73,"median":3.9955,"std_dev":0.3373971547005104,"read_row":99997397,"read_byte":2339600470,"time":[4.472,4.352,3.983,3.955,3.573,4.008,3.751,4.73,4.371,3.941],"error":[],"mean":4.099872633118584},{"name":"Q26","sql":"SELECT SearchPhrase FROM hits WHERE SearchPhrase \u003c\u003e '' ORDER BY SearchPhrase LIMIT 10;","min":3.297,"max":4.688,"median":3.6835,"std_dev":0.380155178841483,"read_row":99997397,"read_byte":1539621294,"time":[3.491,3.454,3.728,3.297,4.044,3.812,3.914,3.475,3.639,4.688],"error":[],"mean":3.7362646941194475},{"name":"Q27","sql":"SELECT SearchPhrase FROM hits WHERE SearchPhrase \u003c\u003e '' ORDER BY EventTime, SearchPhrase LIMIT 10;","min":3.485,"max":3.999,"median":3.7935,"std_dev":0.18241461016048033,"read_row":99997397,"read_byte":2339600470,"time":[3.746,3.579,3.841,3.887,3.986,3.516,3.615,3.875,3.485,3.999],"error":[],"mean":3.7484426227256216},{"name":"Q28","sql":"SELECT CounterID, AVG(length(URL)) AS l, COUNT(*) AS c FROM hits WHERE URL \u003c\u003e '' GROUP BY CounterID HAVING COUNT(*) \u003e 100000 ORDER BY l DESC LIMIT 25;","min":3.34,"max":4.114,"median":3.6625,"std_dev":0.22550024390230713,"read_row":99997397,"read_byte":10238805150,"time":[3.584,3.34,4.114,3.665,3.667,3.981,3.879,3.644,3.424,3.66],"error":[],"mean":3.688984930163641},{"name":"Q30","sql":"SELECT SUM(ResolutionWidth), SUM(ResolutionWidth + 1), SUM(ResolutionWidth + 2), SUM(ResolutionWidth + 3), SUM(ResolutionWidth + 4), SUM(ResolutionWidth + 5), SUM(ResolutionWidth + 6), SUM(ResolutionWidth + 7), SUM(ResolutionWidth + 8), SUM(ResolutionWidth + 9), SUM(ResolutionWidth + 10), SUM(ResolutionWidth + 11), SUM(ResolutionWidth + 12), SUM(ResolutionWidth + 13), SUM(ResolutionWidth + 14), SUM(ResolutionWidth + 15), SUM(ResolutionWidth + 16), SUM(ResolutionWidth + 17), SUM(ResolutionWidth + 18), SUM(ResolutionWidth + 19), SUM(ResolutionWidth + 20), SUM(ResolutionWidth + 21), SUM(ResolutionWidth + 22), SUM(ResolutionWidth + 23), SUM(ResolutionWidth + 24), SUM(ResolutionWidth + 25), SUM(ResolutionWidth + 26), SUM(ResolutionWidth + 27), SUM(ResolutionWidth + 28), SUM(ResolutionWidth + 29), SUM(ResolutionWidth + 30), SUM(ResolutionWidth + 31), SUM(ResolutionWidth + 32), SUM(ResolutionWidth + 33), SUM(ResolutionWidth + 34), SUM(ResolutionWidth + 35), SUM(ResolutionWidth + 36), SUM(ResolutionWidth + 37), SUM(ResolutionWidth + 38), SUM(ResolutionWidth + 39), SUM(ResolutionWidth + 40), SUM(ResolutionWidth + 41), SUM(ResolutionWidth + 42), SUM(ResolutionWidth + 43), SUM(ResolutionWidth + 44), SUM(ResolutionWidth + 45), SUM(ResolutionWidth + 46), SUM(ResolutionWidth + 47), SUM(ResolutionWidth + 48), SUM(ResolutionWidth + 49), SUM(ResolutionWidth + 50), SUM(ResolutionWidth + 51), SUM(ResolutionWidth + 52), SUM(ResolutionWidth + 53), SUM(ResolutionWidth + 54), SUM(ResolutionWidth + 55), SUM(ResolutionWidth + 56), SUM(ResolutionWidth + 57), SUM(ResolutionWidth + 58), SUM(ResolutionWidth + 59), SUM(ResolutionWidth + 60), SUM(ResolutionWidth + 61), SUM(ResolutionWidth + 62), SUM(ResolutionWidth + 63), SUM(ResolutionWidth + 64), SUM(ResolutionWidth + 65), SUM(ResolutionWidth + 66), SUM(ResolutionWidth + 67), SUM(ResolutionWidth + 68), SUM(ResolutionWidth + 69), SUM(ResolutionWidth + 70), SUM(ResolutionWidth + 71), SUM(ResolutionWidth + 72), SUM(ResolutionWidth + 73), SUM(ResolutionWidth + 74), SUM(ResolutionWidth + 75), SUM(ResolutionWidth + 76), SUM(ResolutionWidth + 77), SUM(ResolutionWidth + 78), SUM(ResolutionWidth + 79), SUM(ResolutionWidth + 80), SUM(ResolutionWidth + 81), SUM(ResolutionWidth + 82), SUM(ResolutionWidth + 83), SUM(ResolutionWidth + 84), SUM(ResolutionWidth + 85), SUM(ResolutionWidth + 86), SUM(ResolutionWidth + 87), SUM(ResolutionWidth + 88), SUM(ResolutionWidth + 89) FROM hits;","min":1.702,"max":1.981,"median":1.805,"std_dev":0.08659930715658179,"read_row":99997397,"read_byte":199994794,"time":[1.772,1.803,1.981,1.725,1.807,1.702,1.936,1.721,1.818,1.849],"error":[],"mean":1.8093674536222972},{"name":"Q31","sql":"SELECT SearchEngineID, ClientIP, COUNT(*) AS c, SUM(IsRefresh), AVG(ResolutionWidth) FROM hits WHERE SearchPhrase \u003c\u003e '' GROUP BY SearchEngineID, ClientIP ORDER BY c DESC LIMIT 10;","min":4.384,"max":4.68,"median":4.583,"std_dev":0.08003348064835951,"read_row":99997397,"read_byte":2539595264,"time":[4.384,4.591,4.562,4.68,4.648,4.512,4.583,4.598,4.577],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}"],"mean":4.569845806655006},{"name":"Q32","sql":"SELECT WatchID, ClientIP, COUNT(*) AS c, SUM(IsRefresh), AVG(ResolutionWidth) FROM hits WHERE SearchPhrase \u003c\u003e '' GROUP BY WatchID, ClientIP ORDER BY c DESC LIMIT 10;","min":7.235,"max":9.494,"median":7.8374999999999995,"std_dev":0.7473365298771957,"read_row":99997397,"read_byte":3139579646,"time":[8.024,7.235,7.429,9.494,8.297,7.651],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}"],"mean":7.988674428219906},{"name":"Q33","sql":"SELECT WatchID, ClientIP, COUNT(*) AS c, SUM(IsRefresh), AVG(ResolutionWidth) FROM hits GROUP BY WatchID, ClientIP ORDER BY c DESC LIMIT 10;","min":40.845,"max":42.543,"median":41.3305,"std_dev":0.5569394541200643,"read_row":99997397,"read_byte":1599958352,"time":[40.845,41.501,41.16,41.011,42.543,41.596],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":41.438956572810326},{"name":"Q34","sql":"SELECT URL, COUNT(*) AS c FROM hits GROUP BY URL ORDER BY c DESC LIMIT 10;","min":13.903,"max":14.909,"median":14.101500000000001,"std_dev":0.4044078232428251,"read_row":99997397,"read_byte":9838815562,"time":[14.268,13.903,13.935,14.909],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":14.248094201372266},{"name":"Q35","sql":"SELECT 1, URL, COUNT(*) AS c FROM hits GROUP BY 1, URL ORDER BY c DESC LIMIT 10;","min":38.971,"max":40.352,"median":39.516,"std_dev":0.49380562977754705,"read_row":99997397,"read_byte":9838815562,"time":[38.971,39.491,39.058,40.352,40.043,39.541],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":39.57292638140673},{"name":"Q36","sql":"SELECT ClientIP, ClientIP - 1, ClientIP - 2, ClientIP - 3, COUNT(*) AS c FROM hits GROUP BY ClientIP, ClientIP - 1, ClientIP - 2, ClientIP - 3 ORDER BY c DESC LIMIT 10;","min":6.266,"max":6.903,"median":6.456,"std_dev":0.18506261869839127,"read_row":99997397,"read_byte":399989588,"time":[6.654,6.613,6.456,6.401,6.571,6.345,6.903,6.379,6.266],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":6.507182073753094},{"name":"Q37","sql":"SELECT URL, COUNT(*) AS PageViews FROM hits WHERE CounterID = 62 AND EventDate \u003e= '2013-07-01' AND EventDate \u003c= '2013-07-31' AND DontCountHits = 0 AND IsRefresh = 0 AND URL \u003c\u003e '' GROUP BY URL ORDER BY PageViews DESC LIMIT 10;","min":2.123,"max":2.697,"median":2.5454999999999997,"std_dev":0.1954684544029206,"read_row":11870569,"read_byte":1181383544,"time":[2.697,2.641,2.497,2.355,2.123,2.594],"error":["query has error: \u0026{Code:1068 Message:Cannot send flight data to endpoint, because sender is closed. Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}"],"mean":2.4764513152032213},{"name":"Q38","sql":"SELECT Title, COUNT(*) AS PageViews FROM hits WHERE CounterID = 62 AND EventDate \u003e= '2013-07-01' AND EventDate \u003c= '2013-07-31' AND DontCountHits = 0 AND IsRefresh = 0 AND Title \u003c\u003e '' GROUP BY Title ORDER BY PageViews DESC LIMIT 10;","min":2.208,"max":2.477,"median":2.3215000000000003,"std_dev":0.09748030570325471,"read_row":11870569,"read_byte":1520274306,"time":[2.423,2.313,2.226,2.313,2.208,2.477,2.469,2.33,2.214,2.41],"error":[],"mean":2.3362679896525695},{"name":"Q39","sql":"SELECT URL, COUNT(*) AS PageViews FROM hits WHERE CounterID = 62 AND EventDate \u003e= '2013-07-01' AND EventDate \u003c= '2013-07-31' AND IsRefresh = 0 AND IsLink \u003c\u003e 0 AND IsDownload = 0 GROUP BY URL ORDER BY PageViews DESC LIMIT 10 OFFSET 1000;","min":2.324,"max":2.948,"median":2.428,"std_dev":0.1726882740663071,"read_row":11870569,"read_byte":1205124682,"time":[2.437,2.48,2.522,2.337,2.336,2.948,2.391,2.48,2.419,2.324],"error":[],"mean":2.4618492585363847},{"name":"Q40","sql":"SELECT TraficSourceID, SearchEngineID, AdvEngineID, CASE WHEN (SearchEngineID = 0 AND AdvEngineID = 0) THEN Referer ELSE '' END AS Src, URL AS Dst, COUNT(*) AS PageViews FROM hits WHERE CounterID = 62 AND EventDate \u003e= '2013-07-01' AND EventDate \u003c= '2013-07-31' AND IsRefresh = 0 GROUP BY TraficSourceID, SearchEngineID, AdvEngineID, Src, Dst ORDER BY PageViews DESC LIMIT 10 OFFSET 1000;","min":3.047,"max":3.454,"median":3.234,"std_dev":0.1325728140321694,"read_row":11870569,"read_byte":2172531550,"time":[3.454,3.092,3.262,3.09,3.047,3.283,3.234],"error":["query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: broken pipe, source: Some(hyper::Error(Body, Error { kind: Io(Kind(BrokenPipe)) })) Kind:}","query has error: \u0026{Code:1067 Message:error reading a body from connection: connection reset, source: Some(hyper::Error(Body, Error { kind: Io(Kind(ConnectionReset)) })) Kind:}"],"mean":3.2061507890193925},{"name":"Q41","sql":"SELECT URLHash, EventDate, COUNT(*) AS PageViews FROM hits WHERE CounterID = 62 AND EventDate \u003e= '2013-07-01' AND EventDate \u003c= '2013-07-31' AND IsRefresh = 0 AND TraficSourceID IN (-1, 6) AND RefererHash = 3594120000172545465 GROUP BY URLHash, EventDate ORDER BY PageViews DESC LIMIT 10 OFFSET 100;","min":2.191,"max":2.578,"median":2.385,"std_dev":0.1267335788179282,"read_row":11870569,"read_byte":332375932,"time":[2.26,2.578,2.483,2.544,2.26,2.47,2.352,2.418,2.284,2.191],"error":[],"mean":2.3806319956810835},{"name":"Q42","sql":"SELECT WindowClientWidth, WindowClientHeight, COUNT(*) AS PageViews FROM hits WHERE CounterID = 62 AND EventDate \u003e= '2013-07-01' AND EventDate \u003c= '2013-07-31' AND IsRefresh = 0 AND DontCountHits = 0 AND URLHash = 2868770270353813622 GROUP BY WindowClientWidth, WindowClientHeight ORDER BY PageViews DESC LIMIT 10 OFFSET 10000;","min":2.166,"max":2.502,"median":2.314,"std_dev":0.12007618414989707,"read_row":11870569,"read_byte":284893656,"time":[2.443,2.424,2.172,2.296,2.502,2.188,2.332,2.357,2.171,2.166],"error":[],"mean":2.3019870781129517},{"name":"Q43","sql":"SELECT DATE_TRUNC('minute', EventTime) AS M, COUNT(*) AS PageViews FROM hits WHERE CounterID = 62 AND EventDate \u003e= '2013-07-14' AND EventDate \u003c= '2013-07-15' AND IsRefresh = 0 AND DontCountHits = 0 GROUP BY DATE_TRUNC('minute', EventTime) ORDER BY DATE_TRUNC('minute', EventTime) LIMIT 10 OFFSET 1000;","min":2.136,"max":2.691,"median":2.2525,"std_dev":0.15603618170155276,"read_row":11870569,"read_byte":237411380,"time":[2.345,2.259,2.136,2.246,2.153,2.396,2.268,2.186,2.181,2.691],"error":[],"mean":2.28111063505961}]}